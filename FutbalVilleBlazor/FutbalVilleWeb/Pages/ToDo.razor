@page "/todo"
@using System.Net.Http
@using FutbalVilleWeb.Data
@using MongoDB.Bson
@attribute [Authorize(Roles = "Admin")]
@inject HttpClient Http

<h3>ToDo</h3>

@if (items == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-primary" @onclick="@(async () => await AddItem())">Add New To-Do Item</button>
    <table class="table table-sm table`">
        <thead>
            <tr>
                <th>Title</th>
                <th>Description</th>
                <th>Remark</th>
                <th>Hours</th>
                <th>Level</th>
                <th>Deadline</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in items)
            {
                <tr>
                    <td><input @bind="item.Title" class="form-control" type="text" readonly="@(currentEditingItemId != item.Id)" /></td>
                    <td><textarea @bind="item.Description" class="form-control" cols="120" rows="3" readonly="@(currentEditingItemId != item.Id)" /></td>
                    <td><input @bind="item.Remark" class="form-control" type="text" readonly="@(currentEditingItemId != item.Id)" /></td>
                    <td width="80"><input @bind="item.EstimatedHours" class="form-control" type="number" readonly="@(currentEditingItemId != item.Id)" /></td>
                    <td width="70"><input @bind="item.ImportanceLevel" class="form-control" type="number" readonly="@(currentEditingItemId != item.Id)" /></td>
                    <td><input @bind="item.Deadline" class="form-control" type="datetime-local" readonly="@(currentEditingItemId != item.Id)" /></td>
                    <td>
                        <div class="btn-group btn-group-toggle form-control" data-toggle="buttons" role="group">
                            <label class="btn btn-outline-secondary @GetStatusActiveClass(item, ToDoItem.ToDoStatus.ToDo)">
                                <input type="radio" name="@item.Id" checked="@(item.Status == ToDoItem.ToDoStatus.ToDo)" @onchange="@(async () => await ChangeStatus(item.Id, ToDoItem.ToDoStatus.ToDo))">
                            </label>
                            <label class="btn btn-outline-warning @GetStatusActiveClass(item, ToDoItem.ToDoStatus.InProcess)">
                                <input type="radio" name="@item.Id" checked="@(item.Status == ToDoItem.ToDoStatus.InProcess)" @onchange="@(async () => await ChangeStatus(item.Id, ToDoItem.ToDoStatus.InProcess))">
                            </label>
                            <label class="btn btn-outline-success @GetStatusActiveClass(item, ToDoItem.ToDoStatus.Done)">
                                <input type="radio" name="@item.Id" checked="@(item.Status == ToDoItem.ToDoStatus.Done)" @onchange="@(async () => await ChangeStatus(item.Id, ToDoItem.ToDoStatus.Done))">
                            </label>
                        </div>
                    </td>
                    <td>
                        @if (currentEditingItemId == item.Id)
                        {
                            <button class="btn btn-success" @onclick="@(async () => await EditItem(item.Id, item))">Save</button>
                            <button class="btn btn-danger" @onclick="@(async () => await Refresh())">Cancel</button>
                        }
                        else
                        {
                            <button class="btn btn-primary" @onclick="@(async() => await IsEditing(item.Id))">Edit</button>
                            <button class="btn btn-danger" @onclick="@(async() => await DeleteItem(item.Id))">Delete</button>
                        }
                    </td>
                </tr>

            }
        </tbody>
    </table>
}

@code {
    private List<ToDoItem> items;
    private bool test;
    private string currentEditingItemId;

    protected override async Task OnInitializedAsync() => items = await Http.GetJsonAsync<List<ToDoItem>>("api/todo");

    protected async Task Refresh()
    {
        items = await Http.GetJsonAsync<List<ToDoItem>>("api/todo");
        currentEditingItemId = "";
    }

    protected string GetStatusActiveClass(ToDoItem item, ToDoItem.ToDoStatus status)
    {
        if (item.Status == status)
        {
            return "active";
        }
        return "";

    }
    protected async Task ChangeStatus(string id, ToDoItem.ToDoStatus status)
    {

        var item = await Http.GetJsonAsync<ToDoItem>("/api/todo/" + id);
        item.Status = status;

        await Http.SendJsonAsync(HttpMethod.Put, "/api/todo/" + id, item);

        await Refresh();
    }
    protected async Task IsEditing(string id)
    {
        if (!string.IsNullOrWhiteSpace(currentEditingItemId))
        {
            await Refresh();
        }
        currentEditingItemId = id;
    }
    protected async Task EditItem(string id, ToDoItem item)
    {
        await Http.SendJsonAsync(HttpMethod.Put, "/api/todo/" + id, item);

        currentEditingItemId = "";

        await Refresh();
    }
    protected async Task DeleteItem(string id)
    {
        await Http.DeleteAsync("/api/todo/" + id);

        currentEditingItemId = "";

        await Refresh();
    }
    protected async Task AddItem()
    {
        var defaultItem = new ToDoItem()
        {
            Id = ObjectId.GenerateNewId().ToString(),
            Created = DateTime.Now,
            Status = ToDoItem.ToDoStatus.ToDo,
            Title = "New To do Item",
            Description = "Describe your to do item...",
            Deadline = DateTime.Now.AddHours(1),
            EstimatedHours = 1,
            ImportanceLevel = 1,
            Remark = "New remark"
        };
        await Http.SendJsonAsync(HttpMethod.Post, "/api/todo", defaultItem);
        await Refresh();

        await IsEditing(defaultItem.Id);

    }

}
